#include <iostream>
#include <sstream>

#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
//#include <opencv2/imgcodecs.hpp>
//#include <opencv2/imgproc/imgproc.hpp>
//#include "opencv2/videoio.hpp"
//#include <opencv2/video/video.hpp>
#include <opencv2/video/background_segm.hpp>


using namespace cv;

int main(int argc, char** argv )
{
    string filename = "data/new.mp4";
   // string filename = "data/vehicleDetection.mp4";
    VideoCapture capture(filename);

    if( !capture.isOpened() )
        throw "Error when reading steam_avi";

    Mat frame; //current frame
    Mat frameProcess; //current frame


    int totalframe = capture.get(CV_CAP_PROP_FRAME_COUNT);
    std::cout<<"toralframes = "<< totalframe << std::endl;



    Ptr<BackgroundSubtractorMOG> pMOG; //MOG Background subtractor
    //create Background Subtractor objects
    pMOG = new BackgroundSubtractorMOG(50,2,0.5); //MOG approach

    Mat fgMaskMOG; //fg mask fg mask generated by MOG method
/*
    Mat back;
    Mat fore;
    std::vector<std::vector<Point> > contours;

*/
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG");
   // namedWindow("FG Mask MOG 2");

    int keyboard; //input from keyboard

    while( (char)keyboard != 'q' && (char)keyboard != 27 )
    {
        // passe les frame 2 par 2 pour aller accÃ©lerer la video
        capture >> frame;
        capture >> frame;

        frameProcess = frame;
        for (int i = 0; i < frame.size; ++i)
        {
            frame.at(i) = 5;
        }
        // loop video
        if(frame.empty())
        {
            capture.set(CV_CAP_PROP_POS_FRAMES,0);
            totalframe = capture.get(CV_CAP_PROP_FRAME_COUNT);
            continue;
        }

        //update the background model
        pMOG->operator()(frame, fgMaskMOG);

        medianBlur(fgMaskMOG, fgMaskMOG, 5);

        //get the frame number and write it on the current frame
        std::stringstream ss;
        rectangle(frame, Point(10, 2), Point(100,20),
                  Scalar(255,255,255), -1);
        ss << capture.get(CV_CAP_PROP_POS_FRAMES);
        std::string frameNumberString = ss.str();
        putText(frame, frameNumberString.c_str(), Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , Scalar(0,0,0));

        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("FG Mask MOG", fgMaskMOG);





        //get the input from the keyboard
        keyboard = waitKey( 20 );


        //waitKey(24); // waits to display frame

    }

    waitKey(0); // key press to close window

    return 0;

}
